rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection rules
    match /users/{userId} {
      // Allow read if the user is authenticated and the document ID matches their UID
      allow read: if request.auth != null && request.auth.uid == userId;

      // Allow create if:
      // 1. User is authenticated
      // 2. Document ID matches their UID
      // 3. Data follows the correct structure
      allow create: if request.auth != null 
        && request.auth.uid == userId
        && request.resource.data.uid == userId
        && request.resource.data.welcomed is bool
        && (
          !('preferences' in request.resource.data) || (
            request.resource.data.preferences is map
            && (
              !('theme' in request.resource.data.preferences) 
              || request.resource.data.preferences.theme in ['light', 'dark']
            )
            && (
              !('notifications' in request.resource.data.preferences) 
              || request.resource.data.preferences.notifications is bool
            )
          )
        );

      // Allow update if:
      // 1. User is authenticated
      // 2. Document ID matches their UID
      // 3. Not trying to change the uid field
      // 4. Data follows the correct structure
      allow update: if request.auth != null 
        && request.auth.uid == userId
        && (!('uid' in request.resource.data) || request.resource.data.uid == userId)
        && (
          !('welcomed' in request.resource.data) 
          || request.resource.data.welcomed is bool
        )
        && (
          !('preferences' in request.resource.data) || (
            request.resource.data.preferences is map
            && (
              !('theme' in request.resource.data.preferences) 
              || request.resource.data.preferences.theme in ['light', 'dark']
            )
            && (
              !('notifications' in request.resource.data.preferences) 
              || request.resource.data.preferences.notifications is bool
            )
          )
        );

      // No delete allowed
      allow delete: if false;
    }

    // Projects collection rules
    match /projects/{projectId} {
      // Helper function to check if user is owner
      function isOwner() {
        return request.auth != null && resource.data.owner == request.auth.uid;
      }

      // Helper function to check if user is collaborator
      function isCollaborator() {
        return request.auth != null && resource.data.collaborators[request.auth.uid] != null;
      }

      // Allow read if user is owner or collaborator
      allow read: if isOwner() || isCollaborator();

      // Invitations subcollection rules
      match /invitations/{invitationId} {
        // Allow read if user is owner or the invitation is for their email
        allow read: if isOwner() || (
          request.auth != null && 
          resource.data.email == request.auth.token.email
        );

        // Allow create/update if user is owner
        allow create, update: if isOwner() && 
          request.resource.data.email is string &&
          request.resource.data.isEditor is bool &&
          request.resource.data.status in ['pending', 'delivered'] &&
          request.resource.data.createdAt is timestamp;

        // Allow delete if user is owner
        allow delete: if isOwner();
      }
    }

    // Default deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 
