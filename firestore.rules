rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection rules
    match /users/{userId} {
      // Allow reading basic profile info if authenticated
      function isBasicProfileRequest() {
        return request.auth != null && 
          request.time.toMillis() != null &&
          resource.data.diff(request.resource.data).affectedKeys().hasOnly(['displayName', 'photoURL']);
      }

      // Allow read if:
      // 1. User is authenticated and the document ID matches their UID (full access)
      // 2. User is authenticated and the document has basic profile fields
      allow read: if request.auth != null && (
        request.auth.uid == userId ||
        (resource != null && 
         'displayName' in resource.data && 
         'photoURL' in resource.data && 
         'uid' in resource.data)
      );

      // Allow create if:
      // 1. User is authenticated
      // 2. Document ID matches their UID
      // 3. Data follows the correct structure
      allow create: if request.auth != null 
        && request.auth.uid == userId
        && request.resource.data.uid == userId
        && request.resource.data.welcomed is bool
        && (
          !('preferences' in request.resource.data) || (
            request.resource.data.preferences is map
            && (
              !('theme' in request.resource.data.preferences) 
              || request.resource.data.preferences.theme in ['light', 'dark']
            )
            && (
              !('notifications' in request.resource.data.preferences) 
              || request.resource.data.preferences.notifications is bool
            )
          )
        );

      // Allow update if:
      // 1. User is authenticated
      // 2. Document ID matches their UID
      // 3. Not trying to change the uid field
      // 4. Data follows the correct structure
      allow update: if request.auth != null 
        && request.auth.uid == userId
        && (!('uid' in request.resource.data) || request.resource.data.uid == userId)
        && (
          !('welcomed' in request.resource.data) 
          || request.resource.data.welcomed is bool
        )
        && (
          !('preferences' in request.resource.data) || (
            request.resource.data.preferences is map
            && (
              !('theme' in request.resource.data.preferences) 
              || request.resource.data.preferences.theme in ['light', 'dark']
            )
            && (
              !('notifications' in request.resource.data.preferences) 
              || request.resource.data.preferences.notifications is bool
            )
          )
        );

      // No delete allowed
      allow delete: if false;
    }

    // Projects collection rules
    match /projects/{projectId} {
      // Helper function to check if user is owner
      function isOwner() {
        let projectData = get(/databases/$(database)/documents/projects/$(projectId)).data;
        return request.auth != null && projectData.owner == request.auth.uid;
      }

      // Helper function to check if user is collaborator
      function isCollaborator() {
        let projectData = get(/databases/$(database)/documents/projects/$(projectId)).data;
        return request.auth != null && 
               projectData.collaborators != null && 
               projectData.collaborators[request.auth.uid] != null;
      }

      // Helper function to check if user has editor role
      function isEditor() {
        let projectData = get(/databases/$(database)/documents/projects/$(projectId)).data;
        return request.auth != null && (
          isOwner() || (
            projectData.collaborators != null && 
            projectData.collaborators[request.auth.uid] != null &&
            projectData.collaborators[request.auth.uid].role == "editor"
          )
        );
      }

      // Allow read if user is owner or collaborator
      allow read: if isOwner() || isCollaborator();

      // Comments subcollection rules
      match /comments/{commentId} {
        // Allow read if user is authenticated and has access to the parent project
        allow read: if request.auth != null && (isOwner() || isCollaborator());

        // Allow create if user is owner or editor
        allow create: if (isOwner() || isEditor()) &&
          request.resource.data.content is string &&
          request.resource.data.createdAt is timestamp &&
          request.resource.data.createdBy == request.auth.uid &&
          request.resource.data.versionFilename is string &&
          request.resource.data.startTimestamp is number &&
          request.resource.data.endTimestamp is number &&
          request.resource.data.endTimestamp >= request.resource.data.startTimestamp &&
          request.resource.data.resolved is bool;

        // Allow update if user is the comment creator (for content updates)
        allow update: if request.auth != null && (
          // Case 1: Comment creator updating content
          (resource.data.createdBy == request.auth.uid &&
          request.resource.data.content is string &&
          request.resource.data.updatedAt is timestamp &&
          request.resource.data.createdAt == resource.data.createdAt &&
          request.resource.data.createdBy == resource.data.createdBy &&
          request.resource.data.versionFilename == resource.data.versionFilename &&
          request.resource.data.startTimestamp == resource.data.startTimestamp &&
          request.resource.data.endTimestamp == resource.data.endTimestamp &&
          request.resource.data.resolved == resource.data.resolved) ||
          // Case 2: Owner or editor toggling resolved status
          ((isOwner() || isEditor()) &&
          request.resource.data.content == resource.data.content &&
          request.resource.data.createdAt == resource.data.createdAt &&
          request.resource.data.createdBy == resource.data.createdBy &&
          request.resource.data.versionFilename == resource.data.versionFilename &&
          request.resource.data.startTimestamp == resource.data.startTimestamp &&
          request.resource.data.endTimestamp == resource.data.endTimestamp &&
          request.resource.data.resolved is bool &&
          request.resource.data.resolvedBy == request.auth.uid &&
          request.resource.data.resolvedAt is timestamp)
        );

        // Allow delete if user is comment creator or project owner
        allow delete: if request.auth != null &&
          (resource.data.createdBy == request.auth.uid || isOwner());
      }
    }

    // Default deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 
