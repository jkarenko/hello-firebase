<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Audio Project Player</title>

    <!-- Firebase SDK -->
    <script defer src="/__/firebase/11.1.0/firebase-app-compat.js"></script>
    <script defer src="/__/firebase/11.1.0/firebase-functions-compat.js"></script>
    <script defer src="/__/firebase/11.1.0/firebase-auth-compat.js"></script>
    <script defer src="/__/firebase/init.js?useEmulator=true"></script>

    <link rel="stylesheet" href="styles.css">
  </head>
  <body>
    <div class="container">
      <div class="auth-section" id="authSection">
        <button id="loginBtn" class="auth-button">Sign in with Google</button>
        <button id="logoutBtn" class="auth-button" style="display: none;">Sign out</button>
        <span id="userEmail" class="user-email"></span>
      </div>

      <div class="project-section" id="projectSection" style="display: none;">
        <h1>Select a Project</h1>
        <div class="project-list" id="projectList">
          <!-- Projects will be loaded here -->
        </div>
      </div>

      <div class="player-section" id="playerSection" style="display: none;">
        <div class="back-button">
          <button id="backToProjects">‚Üê Back to Projects</button>
        </div>
        <h1 id="projectTitle">Loading...</h1>
        
        <select class="version-selector" id="versionSelect">
          <option value="">Loading versions...</option>
        </select>
        
        <div class="controls">
          <button class="play-pause" id="playPauseBtn">Play</button>
          <span class="time-display" id="timeDisplay">0:00 / 0:00</span>
        </div>
        
        <div class="progress-container" id="progressContainer">
          <div class="progress-bar" id="progressBar"></div>
        </div>
      </div>

      <div id="result"></div>
    </div>

    <script>
      // Logging utility
      const Logger = {
        LOG_LEVELS: {
          DEBUG: 0,
          INFO: 1,
          WARN: 2,
          ERROR: 3
        },
        currentLevel: 1, // Default to INFO

        setLevel(level) {
          this.currentLevel = level;
        },

        formatMessage(level, message, data = {}) {
          const timestamp = new Date().toISOString();
          return `[${timestamp}] ${level}: ${message} ${Object.keys(data).length ? JSON.stringify(data) : ''}`;
        },

        debug(message, data) {
          if (this.currentLevel <= this.LOG_LEVELS.DEBUG) {
            console.debug(this.formatMessage('DEBUG', message, data));
          }
        },

        info(message, data) {
          if (this.currentLevel <= this.LOG_LEVELS.INFO) {
            console.info(this.formatMessage('INFO', message, data));
          }
        },

        warn(message, data) {
          if (this.currentLevel <= this.LOG_LEVELS.WARN) {
            console.warn(this.formatMessage('WARN', message, data));
          }
        },

        error(message, error, data = {}) {
          if (this.currentLevel <= this.LOG_LEVELS.ERROR) {
            if (error instanceof Error) {
              data.errorMessage = error.message;
              data.stack = error.stack;
            }
            console.error(this.formatMessage('ERROR', message, data));
          }
        }
      };

      // Audio cache using IndexedDB
      const AudioCache = {
        DB_NAME: 'audioCache',
        STORE_NAME: 'audioBuffers',
        ETAG_STORE: 'etags',
        db: null,

        async init() {
          return new Promise((resolve, reject) => {
            const request = indexedDB.open(this.DB_NAME, 2); // Increment version for schema update
            
            request.onerror = () => reject(request.error);
            request.onsuccess = () => {
              this.db = request.result;
              resolve();
            };
            
            request.onupgradeneeded = (event) => {
              const db = event.target.result;
              if (!db.objectStoreNames.contains(this.STORE_NAME)) {
                db.createObjectStore(this.STORE_NAME);
              }
              if (!db.objectStoreNames.contains(this.ETAG_STORE)) {
                db.createObjectStore(this.ETAG_STORE);
              }
            };
          });
        },

        async get(key) {
          return new Promise((resolve, reject) => {
            const transaction = this.db.transaction([this.STORE_NAME], 'readonly');
            const store = transaction.objectStore(this.STORE_NAME);
            const request = store.get(key);
            
            request.onerror = () => reject(request.error);
            request.onsuccess = () => resolve(request.result);
          });
        },

        async getETag(key) {
          return new Promise((resolve, reject) => {
            const transaction = this.db.transaction([this.ETAG_STORE], 'readonly');
            const store = transaction.objectStore(this.ETAG_STORE);
            const request = store.get(key);
            
            request.onerror = () => reject(request.error);
            request.onsuccess = () => resolve(request.result);
          });
        },

        async set(key, value, etag) {
          return new Promise((resolve, reject) => {
            const transaction = this.db.transaction([this.STORE_NAME, this.ETAG_STORE], 'readwrite');
            
            const store = transaction.objectStore(this.STORE_NAME);
            const etagStore = transaction.objectStore(this.ETAG_STORE);
            
            store.put(value, key);
            etagStore.put(etag, key);
            
            transaction.oncomplete = () => resolve();
            transaction.onerror = () => reject(transaction.error);
          });
        }
      };

      // Set log level based on environment
      if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
        Logger.setLevel(Logger.LOG_LEVELS.DEBUG);
      }

      document.addEventListener('DOMContentLoaded', async function() {
        Logger.info('Application starting');
        
        // Initialize audio cache
        try {
          await AudioCache.init();
          Logger.info('Audio cache initialized');
        } catch (error) {
          Logger.error('Error initializing audio cache', error);
        }
        
        // Initialize Firebase Auth
        let currentUser = null;
        const auth = firebase.auth();
        const provider = new firebase.auth.GoogleAuthProvider();

        const loginBtn = document.getElementById('loginBtn');
        const logoutBtn = document.getElementById('logoutBtn');
        const userEmail = document.getElementById('userEmail');
        const projectSection = document.getElementById('projectSection');
        const playerSection = document.getElementById('playerSection');
        
        // Helper function to get auth token
        async function getAuthHeader() {
          const token = await currentUser.getIdToken();
          return {
            'Authorization': `Bearer ${token}`
          };
        }

        // Fetch available versions from Cloud Function
        async function loadVersions(projectId) {
          Logger.info('Loading versions');
          try {
            const headers = await getAuthHeader();
            const response = await fetch('/getSongVersions', { headers });
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            const result = await response.json();
            
            const versionSelect = document.getElementById('versionSelect');
            const projectTitle = document.getElementById('projectTitle');
            versionSelect.innerHTML = '';
            
            const currentSong = result.songs.find(song => song.id === projectId);
            if (!currentSong) {
              throw new Error('Project not found');
            }

            projectTitle.textContent = currentSong.name;
            Logger.debug('Loaded song data', { song: currentSong.name, versions: currentSong.versions.length });
            
            currentSong.versions.forEach(version => {
              const option = document.createElement('option');
              option.value = version.filename;
              option.textContent = version.displayName;
              versionSelect.appendChild(option);
            });

            return currentSong;
          } catch (error) {
            Logger.error('Error loading versions', error);
            const versionSelect = document.getElementById('versionSelect');
            versionSelect.innerHTML = '<option value="">Error loading versions</option>';
            if (error.message.includes('401')) {
              alert('Session expired. Please sign in again.');
              await auth.signOut();
            }
            throw error;
          }
        }

        // Auth state change listener
        auth.onAuthStateChanged(async (user) => {
          Logger.info('Auth state changed', { user: user?.email });
          currentUser = user;
          
          if (user) {
            // User is signed in
            loginBtn.style.display = 'none';
            logoutBtn.style.display = 'inline-block';
            userEmail.textContent = user.email;
            projectSection.style.display = 'block';
            
            // Load projects
            await loadProjects();
          } else {
            // User is signed out
            loginBtn.style.display = 'inline-block';
            logoutBtn.style.display = 'none';
            userEmail.textContent = '';
            projectSection.style.display = 'none';
            playerSection.style.display = 'none';
          }
        });

        // Auth event listeners
        loginBtn.addEventListener('click', async () => {
          try {
            Logger.info('Attempting login');
            await auth.signInWithRedirect(provider);
          } catch (error) {
            Logger.error('Login error', error);
            alert('Error signing in. Please try again.');
          }
        });

        // Handle redirect result
        try {
          const result = await auth.getRedirectResult();
          if (result.user) {
            Logger.info('Successfully signed in after redirect', { email: result.user.email });
          }
        } catch (error) {
          Logger.error('Redirect sign-in error', error);
          if (error.code !== 'auth/credential-already-in-use') {
            alert('Error signing in. Please try again.');
          }
        }

        logoutBtn.addEventListener('click', async () => {
          try {
            Logger.info('Signing out');
            await auth.signOut();
          } catch (error) {
            Logger.error('Logout error', error);
            alert('Error signing out. Please try again.');
          }
        });

        // Player initialization and functionality
        async function initializePlayer(projectId) {
          const audioContext = new (window.AudioContext || window.webkitAudioContext)();
          let audioBuffer = null;
          let sourceNode = null;
          let startTime = 0;
          let offset = 0;
          let isPlaying = false;
          let currentSong = null;
          const memoryCache = new Map(); // Temporary cache for the session

          const versionSelect = document.getElementById('versionSelect');
          const playPauseBtn = document.getElementById('playPauseBtn');
          const timeDisplay = document.getElementById('timeDisplay');
          const progressBar = document.getElementById('progressBar');
          const progressContainer = document.getElementById('progressContainer');
          const backToProjects = document.getElementById('backToProjects');

          // Back button handler
          backToProjects.addEventListener('click', () => {
            if (isPlaying) {
              stopAudio();
            }
            playerSection.style.display = 'none';
            projectSection.style.display = 'block';
            audioBuffer = null;
            currentSong = null;
          });

          // Pre-cache all versions
          async function preCacheVersions(versions) {
            Logger.info('Starting pre-cache', { versionCount: versions.length });
            const loadingPromises = versions.map(async version => {
              try {
                if (!memoryCache.has(version.filename)) {
                  await loadAudio(version.filename); // This will cache the buffer internally
                  Logger.debug('Pre-cached version', { version: version.displayName });
                }
              } catch (error) {
                Logger.error('Error pre-caching version', error, { version: version.displayName });
              }
            });

            await Promise.all(loadingPromises);
            Logger.info('Pre-cache complete', { cachedVersions: memoryCache.size });
          }

          async function loadAudio(filename) {
            Logger.debug('Loading audio', { filename });
            
            // Check memory cache first
            if (memoryCache.has(filename)) {
              Logger.debug('Using memory-cached audio', { filename });
              return memoryCache.get(filename);
            }

            // Get auth headers for all requests
            const headers = await getAuthHeader();

            // First, get the signed URL
            const urlResponse = await fetch(`/getAudioUrl?filename=${encodeURIComponent(filename)}&projectId=${encodeURIComponent(currentSong.id)}`, { headers });
            if (!urlResponse.ok) throw new Error(`HTTP error! status: ${urlResponse.status}`);
            const { url, etag: serverETag } = await urlResponse.json();

            // Check if we have a cached version and its ETag
            const cachedETag = await AudioCache.getETag(filename);
            if (cachedETag && serverETag === cachedETag) {
              // ETag matches, use cached version
              try {
                const cachedBuffer = await AudioCache.get(filename);
                if (cachedBuffer) {
                  Logger.debug('Using cached audio (ETag match)', { filename });
                  const buffer = await audioContext.decodeAudioData(cachedBuffer);
                  memoryCache.set(filename, buffer);
                  return buffer;
                }
              } catch (error) {
                Logger.error('Error reading from cache', error);
              }
            }

            if (cachedETag) {
              Logger.debug('ETag mismatch, fetching new version', { 
                cached: cachedETag, 
                server: serverETag 
              });
            }

            // Fetch audio using the URL provided by backend
            const audioResponse = await fetch(url);
            if (!audioResponse.ok) throw new Error(`HTTP error! status: ${audioResponse.status}`);
            
            const arrayBuffer = await audioResponse.arrayBuffer();
            
            // Cache the raw array buffer and ETag in IndexedDB
            if (serverETag) {
              try {
                await AudioCache.set(filename, arrayBuffer, serverETag);
                Logger.debug('Cached audio and ETag', { filename, serverETag });
              } catch (error) {
                Logger.error('Error caching audio', error);
              }
            }
            
            // Decode and cache in memory
            const buffer = await audioContext.decodeAudioData(arrayBuffer);
            memoryCache.set(filename, buffer);
            Logger.debug('Audio loaded and cached', { filename });
            return buffer;
          }

          async function switchVersion(keepPlaying = true) {
            const currentTime = getCurrentTime();
            const wasPlaying = isPlaying;
            const selectedVersion = versionSelect.value;
            
            Logger.info('Switching version', { 
              version: selectedVersion,
              currentTime,
              wasPlaying,
              keepPlaying
            });
            
            if (isPlaying) {
              stopAudio();
            }
            
            try {
              // Use cached version if available
              audioBuffer = await loadAudio(selectedVersion);
              if (wasPlaying && keepPlaying) {
                playAudio(currentTime);
              } else {
                offset = currentTime;
                updateDisplay();
              }
              Logger.debug('Version switch complete', { version: selectedVersion });
            } catch (error) {
              Logger.error('Error switching version', error, { version: selectedVersion });
            }
          }

          function playAudio(startFrom = 0) {
            if (!audioBuffer) {
              Logger.warn('Attempted to play with no audio buffer');
              return;
            }

            Logger.info('Playing audio', { startFrom });
            sourceNode = audioContext.createBufferSource();
            sourceNode.buffer = audioBuffer;
            sourceNode.connect(audioContext.destination);

            offset = startFrom;
            startTime = audioContext.currentTime - offset;
            sourceNode.start(0, offset);
            isPlaying = true;
            playPauseBtn.textContent = 'Pause';

            requestAnimationFrame(updateDisplay);
          }

          function stopAudio() {
            if (sourceNode) {
              Logger.info('Stopping audio', { currentTime: getCurrentTime() });
              sourceNode.stop();
              sourceNode = null;
            }
            offset = getCurrentTime();
            isPlaying = false;
            playPauseBtn.textContent = 'Play';
          }

          function getCurrentTime() {
            if (!audioBuffer) return 0;
            if (isPlaying) {
              return audioContext.currentTime - startTime;
            }
            return offset;
          }

          function formatTime(seconds) {
            const minutes = Math.floor(seconds / 60);
            const remainingSeconds = Math.floor(seconds % 60);
            return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
          }

          function updateDisplay() {
            if (!audioBuffer) return;

            const currentTime = getCurrentTime();
            const duration = audioBuffer.duration;
            
            timeDisplay.textContent = `${formatTime(currentTime)} / ${formatTime(duration)}`;
            progressBar.style.width = `${(currentTime / duration) * 100}%`;

            if (currentTime >= duration) {
              Logger.info('Playback complete');
              stopAudio();
              offset = 0;
            }

            if (isPlaying) {
              requestAnimationFrame(updateDisplay);
            }
          }

          playPauseBtn.addEventListener('click', () => {
            Logger.debug('Play/Pause clicked', { isPlaying });
            if (isPlaying) {
              stopAudio();
            } else {
              playAudio(offset);
            }
          });

          progressContainer.addEventListener('click', (e) => {
            if (!audioBuffer) {
              Logger.warn('Seek attempted with no audio buffer');
              return;
            }
            
            const rect = progressContainer.getBoundingClientRect();
            const ratio = (e.clientX - rect.left) / rect.width;
            const newTime = ratio * audioBuffer.duration;
            
            Logger.info('Seeking', { 
              fromTime: getCurrentTime(),
              toTime: newTime,
              ratio 
            });
            
            if (isPlaying) {
              stopAudio();
              playAudio(newTime);
            } else {
              offset = newTime;
              updateDisplay();
            }
          });

          versionSelect.addEventListener('change', () => {
            Logger.info('Version selected', { version: versionSelect.value });
            switchVersion();
          });

          // Load versions and initialize player
          try {
            currentSong = await loadVersions(projectId);
            await preCacheVersions(currentSong.versions);
            await switchVersion(false);
            Logger.info('Player initialized');
          } catch (error) {
            Logger.error('Error initializing player', error);
          }
        }

        // Load and display available projects
        async function loadProjects() {
          Logger.info('Loading projects');
          try {
            const headers = await getAuthHeader();
            const response = await fetch('/getSongVersions', { headers });
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            const result = await response.json();
            
            const projectList = document.getElementById('projectList');
            projectList.innerHTML = '';
            
            result.songs.forEach(project => {
              const projectCard = document.createElement('div');
              projectCard.className = 'project-card';
              projectCard.innerHTML = `
                <h2>${project.name}</h2>
                <p>${project.versions.length} version${project.versions.length === 1 ? '' : 's'}</p>
              `;
              
              projectCard.addEventListener('click', async () => {
                projectSection.style.display = 'none';
                playerSection.style.display = 'block';
                await initializePlayer(project.id);
              });
              
              projectList.appendChild(projectCard);
            });
          } catch (error) {
            Logger.error('Error loading projects', error);
            if (error.message.includes('401')) {
              alert('Session expired. Please sign in again.');
              await auth.signOut();
            }
          }
        }
      });
    </script>
  </body>
</html>
